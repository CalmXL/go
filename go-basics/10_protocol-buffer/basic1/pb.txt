
JSON

1. 静态数据
2. 所有字符都要进行二进制转换后传输

{
    "name": "xiaoyesensen",
    "age": 37,
    "is_marriage": true
}

JSON.stringify() | JSON.parse()

// -------------------------------------

XML
1. 静态数据
2. 体积很大

<name>xiaoyesensen</name>
<age>37</age>
<is-marriage>true </is-marriage>

------------------------
Protocol Buffer - Protobuf 是一门语言

全程: IDL Language (interface Description Language)
                接口描述语言

.proto文件
syntax="proto3";
option go_package="./;proto"

message MyInfo {
    string name = 1;
    int32 age = 2;
    bool isMarriage = 3;
}

myInfo.proto => myInfo.pb.go

type MyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Age        int32  `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	IsMarriage bool   `protobuf:"varint,3,opt,name=isMarriage,proto3" json:"isMarriage,omitempty"`
}

myInfo := MyInfo {
    Name: "xiaoyesensen",
    Age: 38,
    IsMarriage: true
}

myInfo.Age = 37

// --------------------------------------------
fieldNumber => 字段编号

通信传输数据的过程中 -> 字段编号 -> x ->  字段名

1 => 00000000 00000000 00000000 0000001

.proto => server / client => 维护这个文件
           .go / .js => 字段名和字段编号的映射

varint => Variable-Width integer 可变长编码

Age
    fieldNumber => 2
                => 00000000 00000000 00000000 00000010
                => 00000010

    value => 38
          => 00000000 00000000 00000000 00100110
          => 00100110

    => filedNumber + value     fieldNumber     value
    => 00000010    + 00100110  00000010    +   00100110
    => sign bit | msb most significant bit
    => 1 0100110 + 0 0000010 + 1 0100110 + 0 0000010

    => 每一个字节二进制的首位是标志位 sign bit
    => 只要是标志位是1 => 当前一组 keyValue 还有下一个字节
    => 只要标志位是 0 => 当前这一个字节是 fieldNumber 结束

    => 1 0100110 + 0 0000010


// -----------------------------------------
isMarriage
    fieldNumber => 3
                => 00000000 00000000 00000000 00000011
                => 0 0000011

    value       => true => int32 => 1
                => 00000000 00000000 00000000 00000011
                => 1 0000001

    => 1 0000001 + 0 0000001

如果是 -1
=> 11111111 11111111 11111111 11111111
Zigzag 编码

sint

负数: 2 * abs(负数) - 1 =>
      2 * abs(-1) - 1 => 1

正数: 2 * abs(正数)
      2 * abs(1) = 2

------------------------------------

Name
    tag length  value => TLV 编码
    T   L       V

    

    tag field + tag length +  tag value

    Name

    Tag => filedNumber << 3 | wireType
        => 1 << 3
        =>  00000001 << 3 => 00001000
        => 00001000 | 00000010
        => 00001010
    
    00001010 00001100