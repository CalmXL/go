package main

import "fmt"

/*
	GO 是典型的强类型语言

	1. 强类型语言 (静态语言)
		 类型是在编译阶段确认，并且在运行阶段不能随意更改
	2. 弱类型语言 (动态语言)
		 运行时进行类型推断，并且可以进行类型变换

*/

/**

数据类型：
	1. 基本数据类型：
		a. 布尔型：bool => true | false
		b. 数值型：
       1. 整型 123
       2. 浮点型 123.2
		c. 字符串型: string => "abc"


	2. 派生数据类型
		a. 指针
		b. 数组 Array
		c. 结构体 struct
		d. 通道 channel
		e. 切片 slice
		f. 接口 interface
		g. Map
		h. 函数 func

	数据类型的分类：
		值类型：bool、 数值类型、 字符串类型、 数组类型、结构体类型
		引用类型：指针、通道、切片、接口、Map、函数

	内存存储基本认识：
		值类型：
		标识符		地址				内存空间
		x				0x0001		1
		y       0x0002		1   		<= x

		1. 这样的存储操作的值 => 值类型
		2. 值类型一般由内存中的栈内存进行空间分配
		3. 值类型的值是固定内存空间大小

		1. 声明 x 变量
    2. 将 1 赋值给 x
		3. 声明 y 变量
		4. 将 x 存储的值 1 拷贝一份
		5. 将拷贝的 1 赋值给变量 y

	引用类型
		x = [ 1, 2, 3 ]
		y = x
		y.push(4)

		x? [1, 2, 3, 4]
		y? [1, 2, 3, 4]

		标识符			内存地址			栈内存 				内存地址  	堆内存
		x					0x0001			0x1001	-->		0x1001	 	[1, 2, 3]
		y					0x0002			0x1001	-->

		a					0x0003			1
		b         0x0004			1

		1. x 对应的栈内存空间为堆内存空间的一个地址 (指针)
		2. 通过这个地址来访问堆内存对应地址的空间
		3. 从空间中取出值
		4. 引用类型引用的是堆内存对应空间的地址
		5. 如果多个变量引用了同一个地址，那么它们共享值
		6. 引用类型一般对于内存空间的分配是动态的
*/

func main() {

	//var x int = 1
	//x = 2
	//
	//fmt.Println(x)

	//var x int = 1
	//fmt.Println(x)

	var x int = 1
	var ptr *int = &x // * 指针 & 拿到地址

	*ptr = 100 // 通过指针找到对应内存空间，修改对应的值

	fmt.Println(ptr, x)
}
